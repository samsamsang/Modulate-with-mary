import numpy as np
import matplotlib.pyplot as plt
import base64
import pandas as pd
l='data_03.txt'
print(l[-3:])
with open(l,'rb') as file_to_decode:
    binary_file_data=file_to_decode.read()
    data=np.frombuffer(base64.b64decode(binary_file_data),np.int16)
print(320000/160000)
print(len(data))
T=np.linspace(0,319999/160000,320000)
fft_result=np.fft.fft(data)
fft_freq=np.fft.fftfreq(320000,1/160000)
p1=np.abs(fft_freq)<=19500
p2= (np.abs(fft_freq)>=19500) & (np.abs(fft_freq)<=32500)
p3=np.abs(fft_freq)>32500
##nous appliquons ces portes en fréquence à notre transformée du signal pour obtenir nos trois signaux
fft_result1=p1*fft_result
fft_result2=p2*fft_result
fft_result3=p3*fft_result
## Nous les détransformons afin d'effectuer une modulation sur les signaux séparés
detrans1=np.fft.fft(fft_result1)
detrans2=np.fft.fft(fft_result2)
detrans3=np.fft.fft(fft_result3)
mod1=detrans1*np.sin(2*np.pi*T*12500)
mod2=detrans2*np.sin(2*np.pi*T*25000)
mod3=detrans3*np.sin(2*np.pi*T*37500)
## Enfin nous repassons sur leurs spectres en fréquence afin d'appliquer une dernière porte et isoler le signal final
modfin1=np.fft.fft(mod1)
modfin2=np.fft.fft(mod2)
modfin3=np.fft.fft(mod3)
j=np.abs(fft_freq)<12000
traite1=modfin1*j
traite2=modfin2*j
traite3=modfin3*j
##Nous obtenons finalement chacun des signaux isolés
fin1=np.fft.fft(traite1)
fin2=np.fft.fft(traite2)
fin3=np.fft.fft(traite3)
plt.plot(T,np.real(fin3))
plt.show()
