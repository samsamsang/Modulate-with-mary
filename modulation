
# This is a sample Python script.

# Press Maj+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
signal = pd.read_csv('data_01.csv',sep=',',header=2,nrows=4000) # si header = 2 on a le titre des colonnes sinon =3  on a seulement la première ligne # smipfooter does not work with 'c' engine : use of nrows but not useable for each file
#print(signal)
# we create vectors
T=signal['Time(s)']# remember to call col first and then line
#print(T)
V=signal['Volt(V)']
V_test=np.sin(2* np.pi * 2000 * T) * V # On multiplie par une sinusoide de la freq de la porteuse
# plt.plot(T,V)
# plt.show()
print(len(V_test))
# plt.plot(T,V_e)
# plt.show()
# plt.plot(T,V,label='courbe de modulation')
# plt.xlabel('time(s)')
# plt.ylabel('Voltage(V)')
# plt.legend()
# # plt.xlim(0,0.02)#try to find a way to automatize this command
# plt.title('raw_signal')
# plt.show()

#let's calculate fourier transform
fft_result=np.fft.fft(V_test)#mettre seulement l'image de la fonction + le signal dont la freq voulue est centrée en 0
print(np.shape(fft_result))
fft_freq=np.fft.fftfreq(4000,0.00004)
fft_mag=np.abs(fft_result) / 4000
print(fft_freq)
print(len(fft_freq))
plt.plot(fft_freq,fft_mag)
f_porteuse=fft_freq[2000]
plt.show()
print(f_porteuse)

## appliquer un passe bas ou juste supprimer les parties du ignal extremales
def fft_result_rendu(result,freq):
    for i in range(4000):
        if np.abs(freq[i])>750:
            result[i]=0
    return(result)
final=fft_result_rendu(fft_result,fft_freq)
plt.plot(fft_freq,np.abs(final)/4000)
plt.show()
joie=np.fft.fft(final)
plt.plot(T,np.abs(joie))
plt.xlim(0,0.02)
plt.show()
