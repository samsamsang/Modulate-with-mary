import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
signal = pd.read_csv('data_01.csv',sep=',',header=2,nrows=4000)
# on crée un vecteur temps
T=signal['Time(s)']
# On extrait les données à analyser du fichier et on affiche le signal
V=signal['Volt(V)']

plt.plot(T,V)
plt.title('signal d origine')
plt.xlabel("Temps")
plt.ylabel("Amplitude")
plt.show()

fft_freq=np.fft.fftfreq(4000,0.00004)
# on calcule la transformée de fourier du signal pour en identifier la porteuse
fft_result=np.fft.fft(V)
fft_mag=np.abs(fft_result) / 4000

plt.plot(fft_freq,fft_mag)
plt.title("transformée de Fourier du signal d entrée")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.show()
# On multiplie par une sinusoide de la freq de la porteuse pour démoduler
V_test=np.sin(2* np.pi * 2000 * T) * V
fft_modul=np.fft.fft(V_test)
plt.plot(fft_freq,np.abs(fft_modul)/4000)
plt.title("transformée de Fourier du signal démodulé")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.show()
#on crée un filtre passe-bas, c'est à dire une porte entre 0 et 750 Hz
porte=np.abs(fft_freq)<750
## On applique le passe bas
final=fft_modul*porte

plt.plot(fft_freq,np.abs(final)/4000)
plt.title("isolation du pic centrale du signal démodulé")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.show()
# On calcule la transformée de fourier inverse du signal tronqué
signal=np.fft.ifft(final)

plt.plot(T,np.abs(signal))
plt.title("signal final")
plt.xlabel("Temps")
plt.ylabel("Amplitude")
plt.show()
