
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import csv
import scipy
debug=False
def gaussienne(x,A,B,w, x0):
 g= A+ B * np.exp( -2 * (x - x0)**2 / w**2)
 return g
#calcul du waist en fonction de z
lm=1.3e-6
def rayon(z, w0, M_2): # w0 :"en pixel"
  w=w0*4.65e-6
  return w*np.sqrt(1+np.square((z*(10**-3)*lm*M_2)/(np.pi* (w)**2)))
#automatisation curve fit
def do_curv_fit(x,y,x_bary, axe,b):
  p0_x= [y[0], np.max(y)-np.min(y),np.std(y), x_bary]
  X_fit,X_cov=scipy.optimize.curve_fit(gaussienne,x,y,p0_x)
  if b:
     plt.plot(x,gaussienne(x,X_fit[0],X_fit[1],X_fit[2],X_fit[3]))
     plt.plot(x,y)
     if axe==1:
         plt.title(f"Graphe optimisé selon l'axe x")
     else:
         plt.title(f"Graphe optimisé selon l'axe y")
     plt.show()
  return(X_fit)
# ouverture des fichiers

z=[]
nom=[]
with open('data_laser.csv') as csvfile:
 data2=csv.reader(csvfile)
 for row in data2:
     z = np.append(z, float(row[0]))
     nom = np.append(nom, row[1])


w_x=np.linspace(0,0,15)
w_y=np.linspace(0,0,15)
for i in range(15):
  image=plt.imread(f"Profil{i+1}.tif")


#créer des vecteurs barycentres
  x=np.linspace(0,len(image[0,:])-1,len(image[0,:]))
  y=np.linspace(0,len(image[:,0])-1,len(image[:,0]))
  xx,yy=np.meshgrid(x,y)
  I=np.sum(image) # dénominateur

  X=xx*image
  Y=yy*image
  sumx=np.sum(X)
  sumy=np.sum(Y)
  x_bary=sumx/I
  y_bary=sumy/I
  iline=image[int(y_bary),:]
  icol=image[:,int(x_bary)]

#affichage optionnel en fonction du booléen debug, il imprime les valeurs du laser sur l'axe x et y en leur barycentre en y et x respectivement 
  if debug:
     fig, axs = plt.subplots(nrows=2, ncols=2, )
     plt.axvline(x_bary)
     plt.axhline(y_bary)
     axs[0, 0].imshow(image) 
     axs[0,1].plot(x,iline)
     axs[1,1].plot(y,icol)


  # trouver le waist expérimental selon x et selon y en fonction de z
  #nous faisons correspondre au mieux une courbe gaussienne aux données puis nous 
  #récupérons l'équart type de cette gaussienne
  X_fit=do_curv_fit(x,iline,x_bary,1,debug)
  Y_fit=do_curv_fit(y,icol,y_bary,2,debug)
  

  w_x[i]+=X_fit[2]  
  w_y[i]+=Y_fit[2]



#nous traçons l'évolution du waist observé
plt.plot(z,w_x)
plt.plot(z,w_y)
plt.show()
#tracer le waist théorique donné par la fonction rayon pour M_2=1
plt.figure()
w_xz=rayon (z, np.min(w_x),1)
w_yz=rayon (z, np.min(w_y),1)
plt.plot(z, w_xz,color='r',label='w en x')
plt.plot(z, w_yz,color='b',label='w en y')
plt.xlabel('distance z centrée sur min de waist(mm)')
plt.ylabel('valeur du waist(pl)')
plt.legend()
plt.title("graphe de l'évolution du waist théorique à M_2=1 en x et y ")
plt.show()
w_x=w_x*4.65e-6
w_y=w_y*4.65e-6
# moindre carré sur w0
p0_xz = [w_x[0], 1 ]#paramètres de bases, pour optimiser la recherche des valeur dans le fit
p0_yz = [w_y[0], 1 ]
w0x_param, non_important = scipy.optimize.curve_fit(rayon, z,w_x, p0_xz)
w0y_param,non_important=scipy.optimize.curve_fit(rayon, z,w_y, p0_yz)
plt.figure()
plt.plot(z, rayon(z,*w0x_param ),label='prediction optimisée')

plt.plot(z,w_x,label='waist en x')
plt.xlabel('distance z centrée sur min de waist(mm)')
plt.ylabel('valeur du waist en x (m)')
plt.legend()
plt.title("tracé du waist et de sa prédiction optimisée en x selon l'axe de propagation z ")
plt.figure()
plt.plot(z,rayon(z,*w0y_param),label='prediction optimisée')
plt.plot(z,w_y,label='waist en y')
plt.xlabel('distance z centrée sur min de waist(mm)')
plt.ylabel('valeur du waist en y (m)')
plt.show()
print(w0x_param,w0y_param)
